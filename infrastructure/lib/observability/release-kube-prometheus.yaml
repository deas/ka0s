apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  releaseName: prometheus
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      version: "45.7.1"
  interval: 5m
  install:
    remediation:
      retries: 3
  values:
    defaultRules:
      create: true
      # rules:
        # alertmanager: true
        # etcd: true
        # configReloaders: true
        # general: true
        # k8s: true
        # kubeApiserverAvailability: true
        # kubeApiserverBurnrate: true
        # kubeApiserverHistogram: true
        # kubeApiserverSlos: true
        # kubeControllerManager: true
        # kubelet: true
        # kubeProxy: true
        # kubePrometheusGeneral: true
        # kubePrometheusNodeRecording: true
        # kubernetesApps: true
        # kubernetesResources: true
        # kubernetesStorage: true
        # kubernetesSystem: true
        # kubeSchedulerAlerting: true
        # kubeSchedulerRecording: true
        # kubeStateMetrics: true
        # network: true
        # node: true
        # nodeExporterAlerting: true
        # nodeExporterRecording: true
        # prometheus: true
        # prometheusOperator: true
    
    alertmanager:
    #   enabled: false
      ## Settings affecting alertmanagerSpec
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#alertmanagerspec
      ##  
      alertmanagerSpec:
        ## AlertmanagerConfigs to be selected to merge and configure Alertmanager with.
        ##
        # alertmanagerConfigSelector: {}
        ## Example which selects all alertmanagerConfig resources
        ## with label "alertconfig" with values any of "example-config" or "example-config-2"
        # alertmanagerConfigSelector:
        #   matchExpressions:
        #     - key: alertconfig
        #       operator: In
        #       values:
        #         - example-config
        #         - example-config-2
        #
        ## Example which selects all alertmanagerConfig resources with label "role" set to "example-config"
        alertmanagerConfigSelector:
          matchLabels:
            alertmanagerConfig: prometheus # same as helm release
            # role: example-config
        ## Namespaces to be selected for AlertmanagerConfig discovery. If nil, only check own namespace.
        ##
        alertmanagerConfigNamespaceSelector: {}
        ## Example which selects all namespaces
        ## with label "alertmanagerconfig" with values any of "example-namespace" or "example-namespace-2"
        # alertmanagerConfigNamespaceSelector:
        #   matchExpressions:
        #     - key: alertmanagerconfig
        #       operator: In
        #       values:
        #         - example-namespace
        #         - example-namespace-2
        ## Example which selects all namespaces with label "alertmanagerconfig" set to "enabled"
        # alertmanagerConfigNamespaceSelector:
        #   matchLabels:
        #     alertmanagerconfig: enabled
        ## AlermanagerConfig to be used as top level configuration
        ##
        # alertmanagerConfiguration: {}
        ## Example with select a global alertmanagerconfig
        #alertmanagerConfiguration:
        #   name: global
        ## Defines the strategy used by AlertmanagerConfig objects to match alerts. eg:
        ##
        alertmanagerConfigMatcherStrategy: {}
        ## Example with use OnNamespace strategy
        # alertmanagerConfigMatcherStrategy:
        #   type: OnNamespace

    ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
    ##
    grafana:
      enabled: true
      # dashboardProviders: # {}
      #   dashboardproviders.yaml:
      #     apiVersion: 1
      #     providers:
      #     - disableDeletion: false
      #       folder: istio
      #       name: istio
      #       options:
      #         path: /var/lib/grafana/dashboards/istio
      #       orgId: 1
      #       type: file
      #     - disableDeletion: false
      #       folder: istio
      #       name: istio-services
      #       options:
      #         path: /var/lib/grafana/dashboards/istio-services
      #       orgId: 1
      #       type: file
      #     # apiVersion: 1
      #     # providers:
      #     # - name: 'default'
      #     #   orgId: 1
      #     #   folder: ''
      #     #   type: file
      #     #   disableDeletion: false
      #     #   editable: true
      #     #   options:
      #     #     path: /var/lib/grafana/dashboards/default


      sidecar:
        dashboards:
          enabled: true
          label: grafana_dashboard
          labelValue: "1"
    
          ## Annotations for Grafana dashboard configmaps
          ##
          annotations: {}
          multicluster:
            global:
              enabled: false
            etcd:
              enabled: false
          provider:
            allowUiUpdates: false
        datasources:
          enabled: true
          defaultDatasourceEnabled: true
          isDefaultDatasource: true
    
          uid: prometheus
    
          ## URL of prometheus datasource
          ##
          # url: http://prometheus-stack-prometheus:9090/
    
          # If not defined, will use prometheus.prometheusSpec.scrapeInterval or its default
          # defaultDatasourceScrapeInterval: 15s
    
          ## Annotations for Grafana datasource configmaps
          ##
          annotations: {}
    
          ## Create datasource for each Pod of Prometheus StatefulSet;
          ## this uses headless service `prometheus-operated` which is
          ## created by Prometheus Operator
          ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/0fee93e12dc7c2ea1218f19ae25ec6b893460590/pkg/prometheus/statefulset.go#L255-L286
          createPrometheusReplicasDatasources: false
          label: grafana_datasource
          labelValue: "1"
    
          ## Field with internal link pointing to existing data source in Grafana.
          ## Can be provisioned via additionalDataSources
          exemplarTraceIdDestinations: {}
            # datasourceUid: Jaeger
            # traceIdLabelName: trace_id
    
      extraConfigmapMounts: [] # Introduces coupling - prefer label based drop in
      # - name: dashboards-istio
      #   mountPath: "/var/lib/grafana/dashboards/istio"
      # - name: dashboards-istio-services
      #   mountPath: "/var/lib/grafana/dashboards/istio-services"
      # - name: certs-configmap
      #   mountPath: /etc/grafana/ssl/
      #   configMap: certs-configmap
      #   readOnly: true
    
      deleteDatasources: []
      # - name: example-datasource
      #   orgId: 1
    
      ## Configure additional grafana datasources (passed through tpl)
      ## ref: http://docs.grafana.org/administration/provisioning/#datasources
      additionalDataSources: # []
      - name: Loki
        type: loki
        access: proxy
        url: http://loki-read:3100
        jsonData:
          maxLines: 1000
      # - name: prometheus-sample
      #   access: proxy
      #   basicAuth: true
      #   basicAuthPassword: pass
      #   basicAuthUser: daco
      #   editable: false
      #   jsonData:
      #       tlsSkipVerify: true
      #   orgId: 1
      #   type: prometheus
      #   url: https://{{ printf "%s-prometheus.svc" .Release.Name }}:9090
      #   version: 1
      service:
        # type: LoadBalancer
        # annotations:
        #   metallb.universe.tf/allow-shared-ip: "litmus-share"
        #   # metallb.universe.tf/loadBalancerIPs: "172.18.255.200"
        # type: NodePort
        # nodePort: 30080
        port: 3000 # default is 80


